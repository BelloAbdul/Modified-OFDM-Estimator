# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ofdm_param_estim_swig', [dirname(__file__)])
        except ImportError:
            import _ofdm_param_estim_swig
            return _ofdm_param_estim_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_ofdm_param_estim_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ofdm_param_estim_swig = swig_import_helper()
    del swig_import_helper
else:
    import _ofdm_param_estim_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _ofdm_param_estim_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _ofdm_param_estim_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _ofdm_param_estim_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _ofdm_param_estim_swig.high_res_timer_epoch()
class map_float_vector(object):
    """Proxy of C++ std::map<(float,std::vector<(float)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(map_float_vector self) -> SwigPyIterator"""
        return _ofdm_param_estim_swig.map_float_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(map_float_vector self) -> bool"""
        return _ofdm_param_estim_swig.map_float_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(map_float_vector self) -> bool"""
        return _ofdm_param_estim_swig.map_float_vector___bool__(self)

    def __len__(self):
        """__len__(map_float_vector self) -> std::map< float,std::vector< float > >::size_type"""
        return _ofdm_param_estim_swig.map_float_vector___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args, **kwargs):
        """__getitem__(map_float_vector self, std::map< float,std::vector< float > >::key_type const & key) -> pmt_vector_float"""
        return _ofdm_param_estim_swig.map_float_vector___getitem__(self, *args, **kwargs)

    def __delitem__(self, *args, **kwargs):
        """__delitem__(map_float_vector self, std::map< float,std::vector< float > >::key_type const & key)"""
        return _ofdm_param_estim_swig.map_float_vector___delitem__(self, *args, **kwargs)

    def has_key(self, *args, **kwargs):
        """has_key(map_float_vector self, std::map< float,std::vector< float > >::key_type const & key) -> bool"""
        return _ofdm_param_estim_swig.map_float_vector_has_key(self, *args, **kwargs)

    def keys(self):
        """keys(map_float_vector self) -> PyObject *"""
        return _ofdm_param_estim_swig.map_float_vector_keys(self)

    def values(self):
        """values(map_float_vector self) -> PyObject *"""
        return _ofdm_param_estim_swig.map_float_vector_values(self)

    def items(self):
        """items(map_float_vector self) -> PyObject *"""
        return _ofdm_param_estim_swig.map_float_vector_items(self)

    def __contains__(self, *args, **kwargs):
        """__contains__(map_float_vector self, std::map< float,std::vector< float > >::key_type const & key) -> bool"""
        return _ofdm_param_estim_swig.map_float_vector___contains__(self, *args, **kwargs)

    def key_iterator(self):
        """key_iterator(map_float_vector self) -> SwigPyIterator"""
        return _ofdm_param_estim_swig.map_float_vector_key_iterator(self)

    def value_iterator(self):
        """value_iterator(map_float_vector self) -> SwigPyIterator"""
        return _ofdm_param_estim_swig.map_float_vector_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(map_float_vector self, std::map< float,std::vector< float > >::key_type const & key)
        __setitem__(map_float_vector self, std::map< float,std::vector< float > >::key_type const & key, pmt_vector_float x)
        """
        return _ofdm_param_estim_swig.map_float_vector___setitem__(self, *args)

    def asdict(self):
        """asdict(map_float_vector self) -> PyObject *"""
        return _ofdm_param_estim_swig.map_float_vector_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(float,std::vector<(float)>)> self, std::less< float > const & arg2) -> map_float_vector
        __init__(std::map<(float,std::vector<(float)>)> self) -> map_float_vector
        __init__(std::map<(float,std::vector<(float)>)> self, map_float_vector arg2) -> map_float_vector
        """
        this = _ofdm_param_estim_swig.new_map_float_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(map_float_vector self) -> bool"""
        return _ofdm_param_estim_swig.map_float_vector_empty(self)

    def size(self):
        """size(map_float_vector self) -> std::map< float,std::vector< float > >::size_type"""
        return _ofdm_param_estim_swig.map_float_vector_size(self)

    def clear(self):
        """clear(map_float_vector self)"""
        return _ofdm_param_estim_swig.map_float_vector_clear(self)

    def swap(self, *args, **kwargs):
        """swap(map_float_vector self, map_float_vector v)"""
        return _ofdm_param_estim_swig.map_float_vector_swap(self, *args, **kwargs)

    def get_allocator(self):
        """get_allocator(map_float_vector self) -> std::map< float,std::vector< float > >::allocator_type"""
        return _ofdm_param_estim_swig.map_float_vector_get_allocator(self)

    def begin(self):
        """begin(map_float_vector self) -> std::map< float,std::vector< float > >::iterator"""
        return _ofdm_param_estim_swig.map_float_vector_begin(self)

    def end(self):
        """end(map_float_vector self) -> std::map< float,std::vector< float > >::iterator"""
        return _ofdm_param_estim_swig.map_float_vector_end(self)

    def rbegin(self):
        """rbegin(map_float_vector self) -> std::map< float,std::vector< float > >::reverse_iterator"""
        return _ofdm_param_estim_swig.map_float_vector_rbegin(self)

    def rend(self):
        """rend(map_float_vector self) -> std::map< float,std::vector< float > >::reverse_iterator"""
        return _ofdm_param_estim_swig.map_float_vector_rend(self)

    def count(self, *args, **kwargs):
        """count(map_float_vector self, std::map< float,std::vector< float > >::key_type const & x) -> std::map< float,std::vector< float > >::size_type"""
        return _ofdm_param_estim_swig.map_float_vector_count(self, *args, **kwargs)

    def erase(self, *args):
        """
        erase(map_float_vector self, std::map< float,std::vector< float > >::key_type const & x) -> std::map< float,std::vector< float > >::size_type
        erase(map_float_vector self, std::map< float,std::vector< float > >::iterator position)
        erase(map_float_vector self, std::map< float,std::vector< float > >::iterator first, std::map< float,std::vector< float > >::iterator last)
        """
        return _ofdm_param_estim_swig.map_float_vector_erase(self, *args)

    def find(self, *args, **kwargs):
        """find(map_float_vector self, std::map< float,std::vector< float > >::key_type const & x) -> std::map< float,std::vector< float > >::iterator"""
        return _ofdm_param_estim_swig.map_float_vector_find(self, *args, **kwargs)

    def lower_bound(self, *args, **kwargs):
        """lower_bound(map_float_vector self, std::map< float,std::vector< float > >::key_type const & x) -> std::map< float,std::vector< float > >::iterator"""
        return _ofdm_param_estim_swig.map_float_vector_lower_bound(self, *args, **kwargs)

    def upper_bound(self, *args, **kwargs):
        """upper_bound(map_float_vector self, std::map< float,std::vector< float > >::key_type const & x) -> std::map< float,std::vector< float > >::iterator"""
        return _ofdm_param_estim_swig.map_float_vector_upper_bound(self, *args, **kwargs)

    __swig_destroy__ = _ofdm_param_estim_swig.delete_map_float_vector
    __del__ = lambda self : None;
map_float_vector_swigregister = _ofdm_param_estim_swig.map_float_vector_swigregister
map_float_vector_swigregister(map_float_vector)

class ofdm_param_estimation_c(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ofdm_param_estim::ofdm_param_estimation_c.

    To avoid accidental use of raw pointers, ofdm_param_estim::ofdm_param_estimation_c's constructor is in a private implementation class. ofdm_param_estim::ofdm_param_estimation_c::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        signal : 
        min_items : 
        typ_len : 
        typ_cp : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(double samp_rate, int signal, int min_items, std::vector< int,std::allocator< int > > const & typ_len, 
            std::vector< int,std::allocator< int > > const & typ_cp) -> ofdm_param_estimation_c_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ofdm_param_estim::ofdm_param_estimation_c.

        To avoid accidental use of raw pointers, ofdm_param_estim::ofdm_param_estimation_c's constructor is in a private implementation class. ofdm_param_estim::ofdm_param_estimation_c::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            signal : 
            min_items : 
            typ_len : 
            typ_cp : 
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_make(*args, **kwargs)

    make = staticmethod(make)
    def set_samp_rate(self, *args, **kwargs):
        """set_samp_rate(ofdm_param_estimation_c self, double d_samp_rate)"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_set_samp_rate(self, *args, **kwargs)

    __swig_destroy__ = _ofdm_param_estim_swig.delete_ofdm_param_estimation_c
    __del__ = lambda self : None;
ofdm_param_estimation_c_swigregister = _ofdm_param_estim_swig.ofdm_param_estimation_c_swigregister
ofdm_param_estimation_c_swigregister(ofdm_param_estimation_c)

def ofdm_param_estimation_c_make(*args, **kwargs):
  """
    ofdm_param_estimation_c_make(double samp_rate, int signal, int min_items, std::vector< int,std::allocator< int > > const & typ_len, 
        std::vector< int,std::allocator< int > > const & typ_cp) -> ofdm_param_estimation_c_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of ofdm_param_estim::ofdm_param_estimation_c.

    To avoid accidental use of raw pointers, ofdm_param_estim::ofdm_param_estimation_c's constructor is in a private implementation class. ofdm_param_estim::ofdm_param_estimation_c::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        signal : 
        min_items : 
        typ_len : 
        typ_cp : 
    """
  return _ofdm_param_estim_swig.ofdm_param_estimation_c_make(*args, **kwargs)

class ofdm_param_estimation_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::ofdm_param_estim::ofdm_param_estimation_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::ofdm_param_estim::ofdm_param_estimation_c)> self) -> ofdm_param_estimation_c_sptr
        __init__(boost::shared_ptr<(gr::ofdm_param_estim::ofdm_param_estimation_c)> self, ofdm_param_estimation_c p) -> ofdm_param_estimation_c_sptr
        """
        this = _ofdm_param_estim_swig.new_ofdm_param_estimation_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ofdm_param_estimation_c_sptr self) -> ofdm_param_estimation_c"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr___deref__(self)

    __swig_destroy__ = _ofdm_param_estim_swig.delete_ofdm_param_estimation_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(ofdm_param_estimation_c_sptr self, double samp_rate, int signal, int min_items, std::vector< int,std::allocator< int > > const & typ_len, 
            std::vector< int,std::allocator< int > > const & typ_cp) -> ofdm_param_estimation_c_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of ofdm_param_estim::ofdm_param_estimation_c.

        To avoid accidental use of raw pointers, ofdm_param_estim::ofdm_param_estimation_c's constructor is in a private implementation class. ofdm_param_estim::ofdm_param_estimation_c::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            signal : 
            min_items : 
            typ_len : 
            typ_cp : 
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_make(self, *args, **kwargs)

    def set_samp_rate(self, *args, **kwargs):
        """set_samp_rate(ofdm_param_estimation_c_sptr self, double d_samp_rate)"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_set_samp_rate(self, *args, **kwargs)

    def history(self):
        """history(ofdm_param_estimation_c_sptr self) -> unsigned int"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ofdm_param_estimation_c_sptr self, int which, int delay)
        declare_sample_delay(ofdm_param_estimation_c_sptr self, unsigned int delay)
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ofdm_param_estimation_c_sptr self, int which) -> unsigned int"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ofdm_param_estimation_c_sptr self) -> int"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ofdm_param_estimation_c_sptr self) -> double"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_relative_rate(self)

    def start(self):
        """start(ofdm_param_estimation_c_sptr self) -> bool"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_start(self)

    def stop(self):
        """stop(ofdm_param_estimation_c_sptr self) -> bool"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ofdm_param_estimation_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ofdm_param_estimation_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ofdm_param_estimation_c_sptr self) -> int"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ofdm_param_estimation_c_sptr self, int m)"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ofdm_param_estimation_c_sptr self)"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ofdm_param_estimation_c_sptr self) -> bool"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ofdm_param_estimation_c_sptr self, int m)"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ofdm_param_estimation_c_sptr self) -> int"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ofdm_param_estimation_c_sptr self, int i) -> long"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ofdm_param_estimation_c_sptr self, long max_output_buffer)
        set_max_output_buffer(ofdm_param_estimation_c_sptr self, int port, long max_output_buffer)
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ofdm_param_estimation_c_sptr self, int i) -> long"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ofdm_param_estimation_c_sptr self, long min_output_buffer)
        set_min_output_buffer(ofdm_param_estimation_c_sptr self, int port, long min_output_buffer)
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ofdm_param_estimation_c_sptr self, int which) -> float
        pc_input_buffers_full(ofdm_param_estimation_c_sptr self) -> pmt_vector_float
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ofdm_param_estimation_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(ofdm_param_estimation_c_sptr self) -> pmt_vector_float
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ofdm_param_estimation_c_sptr self, int which) -> float
        pc_input_buffers_full_var(ofdm_param_estimation_c_sptr self) -> pmt_vector_float
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ofdm_param_estimation_c_sptr self, int which) -> float
        pc_output_buffers_full(ofdm_param_estimation_c_sptr self) -> pmt_vector_float
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ofdm_param_estimation_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(ofdm_param_estimation_c_sptr self) -> pmt_vector_float
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ofdm_param_estimation_c_sptr self, int which) -> float
        pc_output_buffers_full_var(ofdm_param_estimation_c_sptr self) -> pmt_vector_float
        """
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(ofdm_param_estimation_c_sptr self) -> float"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ofdm_param_estimation_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ofdm_param_estimation_c_sptr self)"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ofdm_param_estimation_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ofdm_param_estimation_c_sptr self) -> int"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ofdm_param_estimation_c_sptr self) -> int"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ofdm_param_estimation_c_sptr self, int priority) -> int"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ofdm_param_estimation_c_sptr self) -> std::string"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ofdm_param_estimation_c_sptr self) -> std::string"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ofdm_param_estimation_c_sptr self) -> io_signature_sptr"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ofdm_param_estimation_c_sptr self) -> io_signature_sptr"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ofdm_param_estimation_c_sptr self) -> long"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ofdm_param_estimation_c_sptr self) -> basic_block_sptr"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ofdm_param_estimation_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ofdm_param_estimation_c_sptr self) -> std::string"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ofdm_param_estimation_c_sptr self, std::string name)"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ofdm_param_estimation_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ofdm_param_estimation_c_sptr self) -> swig_int_ptr"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ofdm_param_estimation_c_sptr self) -> swig_int_ptr"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ofdm_param_estimation_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_message_subscribers(self, *args, **kwargs)

ofdm_param_estimation_c_sptr_swigregister = _ofdm_param_estim_swig.ofdm_param_estimation_c_sptr_swigregister
ofdm_param_estimation_c_sptr_swigregister(ofdm_param_estimation_c_sptr)

ofdm_param_estimation_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ofdm_param_estimation_c = ofdm_param_estimation_c.make;



